/*
 * Copyright (C) 2018 Volodymyr Kryachko
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <boost/graph/graph_archetypes.hpp>
#include <boost/graph/graph_concepts.hpp>
#include <boost/concept/assert.hpp>

#include "grid2d_graph.hpp"

using namespace boost;

const int R = 2;
const int C = 3;

int main (int, char*[]) {
  typedef g2dg::grid2d_graph<int,int,R,C> Graph;
  typedef typename graph_traits<Graph>::vertex_descriptor Vertex;
  typedef typename graph_traits<Graph>::edge_descriptor Edge;

  //BOOST_CONCEPT_ASSERT((BidirectionalGraphConcept<Graph> )); // in_edge_iterator hasn't been implemented
  BOOST_CONCEPT_ASSERT((VertexListGraphConcept<Graph> ));
  //BOOST_CONCEPT_ASSERT((EdgeListGraphConcept<Graph> )); // edge_iterator hasn't been implemented
  BOOST_CONCEPT_ASSERT((IncidenceGraphConcept<Graph> ));
  //BOOST_CONCEPT_ASSERT((AdjacencyGraphConcept<Graph> )); // adjacency_iterator hasn't been implemented
  //BOOST_CONCEPT_ASSERT((AdjacencyMatrixConcept<Graph> )); // edge hasn't been implemented
  BOOST_CONCEPT_ASSERT((ReadablePropertyGraphConcept<Graph, Vertex, vertex_index_t> ));
  //BOOST_CONCEPT_ASSERT((ReadablePropertyGraphConcept<Graph, Edge, edge_index_t> )); // Edge properties haven't been implemented

  return (0);
}
