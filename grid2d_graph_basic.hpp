/*
 * Copyright (C) 2018 Volodymyr Kryachko
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef GRID2D_GRAPH_BASIC_HPP
#define GRID2D_GRAPH_BASIC_HPP

#include <ostream>
#include <utility>

namespace g2dg {

    typedef int c_index, h_index, g2dg_direction_index;

    enum g2dg_direction {up, right, down, left, first_direction=up, last_direction=left, invalid_direction};
    static const char* g2dg_direction_str[] = {"up", "right", "down", "left", "invalid"};
    const std::pair<int, int> g2dg_direction_inc[] = {{-1,0}, {0,1}, {1,0}, {0,-1}};

    typedef std::pair<c_index, h_index> vertex;
    typedef std::pair<vertex, vertex> g2dg_edge;
    typedef std::pair<vertex, g2dg_direction_index> g2dg_out_edge_iterator_base;
    typedef int g2dg_vertex_iterator_base;

    template <int rows_num, int columns_num>
    inline
    int get_row(const g2dg_vertex_iterator_base &vertex) {
        return vertex % rows_num;
    }
    template <int rows_num, int columns_num>
    inline
    int get_column(const g2dg_vertex_iterator_base &vertex) {
        return vertex / rows_num;
    }

    template <int rows_num, int columns_num>
    inline
    bool is_legal_vertex(const vertex &v) {
        return v.first>=0 && v.first<rows_num && v.second>=0 && v.second<columns_num;
    }

    template <int rows_num, int columns_num>
    inline std::ostream& operator<< (std::ostream& s, g2dg_vertex_iterator_base const& v) {
        s << "(" << get_row<rows_num,columns_num>(v) << ", " << get_column<rows_num,columns_num>(v) << ")";
        return s;
    }
    inline std::ostream& operator<< (std::ostream& s, g2dg_out_edge_iterator_base const& e) {
        s << "[(" << e.first.first << "," << e.first.second << "); "
          << g2dg_direction_str[e.second] << "]";
        return s;
    }

    inline
    const vertex get_adjacent(const vertex &source, g2dg_direction_index dir) {
        return std::make_pair(
            source.first+g2dg_direction_inc[dir].first,
            source.second+g2dg_direction_inc[dir].second);
    }
    inline
    const vertex get_adjacent(const g2dg_out_edge_iterator_base &source) {
        return get_adjacent(source.first, source.second);
    }
} // namespace g2dg

inline std::ostream& operator<< (std::ostream& s, g2dg::vertex const& v) {
    s << "(" << v.first << ", " << v.second << ")";
    return s;
}
inline std::ostream& operator<< (std::ostream& s, g2dg::g2dg_edge const& e) {
    s << "[(" << e.first.first << "," << e.first.second << ") ("
      << e.second.first << "," << e.second.second << ")]";
    return s;
}

#endif // GRID2D_GRAPH_BASIC_HPP
