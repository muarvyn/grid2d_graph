/*
 * Copyright (C) 2018 Volodymyr Kryachko
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef G2DG_VERTEX_ITERATOR_HPP
#define G2DG_VERTEX_ITERATOR_HPP

#include <boost/iterator/iterator_facade.hpp>

#include "grid2d_graph_basic.hpp"

namespace g2dg {
    template <typename row_type, typename column_type, row_type rows_num, column_type columns_num>
    class g2dg_vertex_iterator : public boost::iterator_facade <
        g2dg_vertex_iterator<row_type,column_type,rows_num,columns_num>,
        vertex,
        boost::forward_traversal_tag,
        vertex const>
    {
    public:
        g2dg_vertex_iterator() : m_base(vertices_num) { }

        explicit g2dg_vertex_iterator(g2dg_vertex_iterator_base data) : m_base(data) { }

    private:
        static const int vertices_num = rows_num*columns_num;
        friend class boost::iterator_core_access;

        inline
        void increment() {
            if (m_base < vertices_num) ++m_base;
        }

        void decrement() {
            if (m_base >= 0) --m_base;
        }

        vertex const dereference() const
        {
            return std::make_pair(get_row<rows_num,columns_num>(m_base),
                get_column<rows_num,columns_num>(m_base));
        }

        bool equal(g2dg_vertex_iterator const& x) const
        { return x.m_base == this->m_base; }

        g2dg_vertex_iterator_base m_base;

    };
} // namespace g2dg

#endif //G2DG_VERTEX_ITERATOR_HPP
